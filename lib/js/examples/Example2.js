// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Random = require("bs-platform/lib/js/random.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var BenchmarkJs = require("../src/BenchmarkJs.js");
var Belt_SortArray = require("bs-platform/lib/js/belt_SortArray.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

var init = BenchmarkJs.Suite.defaultConfig;

var suiteConfig_onAbort = init.onAbort;

function suiteConfig_onComplete(param) {
  console.log("-- Benchmark Results --\r\n");
  
}

var suiteConfig_onCycle = init.onCycle;

var suiteConfig_onError = init.onError;

var suiteConfig_onReset = init.onReset;

function suiteConfig_onStart(param) {
  console.log("-- Running Benchmark Suite --\r\n");
  
}

var suiteConfig = {
  onAbort: suiteConfig_onAbort,
  onComplete: suiteConfig_onComplete,
  onCycle: suiteConfig_onCycle,
  onError: suiteConfig_onError,
  onReset: suiteConfig_onReset,
  onStart: suiteConfig_onStart
};

var init$1 = BenchmarkJs.Benchmark.defaultConfig;

var benchmarkConfig_async = init$1.async;

var benchmarkConfig_delay = init$1.delay;

var benchmarkConfig_initCount = init$1.initCount;

var benchmarkConfig_maxTime = init$1.maxTime;

var benchmarkConfig_minSamples = init$1.minSamples;

var benchmarkConfig_minTime = init$1.minTime;

var benchmarkConfig_onAbort = init$1.onAbort;

function benchmarkConfig_onComplete(param) {
  console.log("Done\r\n");
  
}

var benchmarkConfig_onCycle = init$1.onCycle;

function benchmarkConfig_onError(prim) {
  console.log(prim);
  
}

var benchmarkConfig_onReset = init$1.onReset;

function benchmarkConfig_onStart($$event) {
  console.log("Running: '" + $$event.target.name + "'...");
  
}

var benchmarkConfig_setup = init$1.setup;

var benchmarkConfig_teardown = init$1.teardown;

var benchmarkConfig = {
  async: benchmarkConfig_async,
  delay: benchmarkConfig_delay,
  initCount: benchmarkConfig_initCount,
  maxTime: benchmarkConfig_maxTime,
  minSamples: benchmarkConfig_minSamples,
  minTime: benchmarkConfig_minTime,
  onAbort: benchmarkConfig_onAbort,
  onComplete: benchmarkConfig_onComplete,
  onCycle: benchmarkConfig_onCycle,
  onError: benchmarkConfig_onError,
  onReset: benchmarkConfig_onReset,
  onStart: benchmarkConfig_onStart,
  setup: benchmarkConfig_setup,
  teardown: benchmarkConfig_teardown
};

Random.init(486);

var myArray = Belt_Array.makeBy(1000, (function (param) {
        return Random.$$int(99999);
      }));

Belt_Array.forEach(Belt_Array.map(Array.prototype.slice.call(BenchmarkJs.Suite.add(benchmarkConfig, BenchmarkJs.Suite.add(benchmarkConfig, BenchmarkJs.Suite.make(suiteConfig, "Array Sort"), "Belt.SortArray.stableSortBy", (function () {
                          Belt_SortArray.stableSortBy(myArray, Caml_primitive.caml_int_compare);
                          
                        })), "Js.Array2.slice + Js.Array2.sortInPlace", (function () {
                      myArray.slice(0).sort();
                      
                    })).run()), (function (prim) {
            return prim.toString();
          })), (function (prim) {
        console.log(prim);
        
      }));

exports.suiteConfig = suiteConfig;
exports.benchmarkConfig = benchmarkConfig;
exports.myArray = myArray;
/*  Not a pure module */
